syntax = "proto3";
package Param;

/* Begin of Structs definition used in Requests/Responses */
enum Coin {
    Ethereum = 0;
    Polkadot = 1;
}

enum StoredKeyType {
    PrivateKey = 0;
    Hd = 1;
}

message StoredKeyInfo {
    string id = 1;
    string name = 2;
    StoredKeyType type = 3;
    bytes data = 4;  // Raw data of the StoredKey, used in requests required an existing StoredKey
}

message StoredKeyAccountInfo {
    string address = 1;
    string derivationPath = 2;
    string coin = 3;  // Coin id
    string extendedPublicKey = 4;
}
/* End of Structs definition used in Requests/Responses */

/* Begin of Requests/Responses definition */
//// 1. Get information from StoredKey raw data
message LoadStoredKeyParam {
    repeated bytes data = 1;
}

message LoadStoredKeyResp {
    repeated StoredKeyInfo StoredKeys = 1;
}

//// 2. Create a new StoredKey with random generated mnemonic
message CreateStoredKeyParam {
    string name = 1;
    string password = 2;
}

message CreateStoredKeyResp {
    StoredKeyInfo StoredKey = 1;
}

//// 3. Create a StoredKey with private key 
message ImportPrivateStoredKeyParam {
    string privateKey = 1; // Hex encoded private key string
    string password = 2;
    string name = 3;
    Coin coin = 4;
}

message ImportPrivateStoredKeyResp {
    StoredKeyInfo StoredKey = 1;
}

//// 4. Create a new StoredKey with given mnemonic
message ImportMnemonicStoredKeyParam {
    string mnemonic = 1;
    string name = 2;
    string password = 3;
    Coin coin = 4;
}

message ImportMnemonicStoredKeyResp {
    StoredKeyInfo StoredKey = 1;
}

//// 5. Create a new StoredKey with Json
message ImportJsonStoredKeyParam {
    string json = 1;
    string name = 2;
    string password = 3;
    Coin coin = 4;
}

message ImportJsonStoredKeyResp {
    StoredKeyInfo StoredKey = 1;
}

//// 6. Get count of accounts of a StoredKey
message GetStoredKeyAccountCountParam {
    bytes data = 1; // StoredKey data returned from other response
}

message GetStoredKeyAccountCountResp {
    uint32 count = 1;
}

//// 7. Get the account at specific index of a StoredKey
message GetStoredKeyAccountParam {
    bytes data = 1;   // StoredKey data returned from other response
    uint32 index = 2; // Index of the account, begin from zero
}

message GetStoredKeyAccountResp {
    StoredKeyAccountInfo account = 1;
}

//// 8. Get all accounts information of a StoredKey
message GetStoredKeyAllAccountParam {
    bytes data = 1;
}

message GetStoredKeyAllAccountResp {
    repeated StoredKeyAccountInfo accounts = 1;
}

//// 9. Get the accounts of specific coin form a StoredKey
message GetStoredKeyAccountsOfCoinParam {
    bytes storedKeyData = 1;
    Coin coin = 2;
}

message GetStoredKeyAccountsOfCoinResp {
    StoredKeyInfo StoredKey = 1;
    repeated StoredKeyAccountInfo accounts = 2;
}

//// 10. Add a new account of specific coin type into a StoredKey
message AddStoredKeyAccountOfCoinParam {
    bytes storedKeyData = 1;
    string address = 2;
    Coin coin = 3;
    string derivationPath = 4;
    string extetndedPublicKey = 5;
}

message AddStoredKeyAccountOfCoinResp {
    StoredKeyAccountInfo account = 1;
    StoredKeyInfo storedKey = 2;
}

//// 11. Remove all accounts of specific coin type into a StoredKey
message RemoveStoredKeyAccountsOfCoinParam {
    bytes storedKeyData = 1;
    Coin coin = 2;
}

message RemoveStoredKeyAccountsOfCoinResp {
    StoredKeyInfo storedKey = 1;
}

//// 12. Remove account of the specific address and coin type
message RemoveStoredKeyAccountOfAddressParam {
    bytes storedKeyData = 1;
    string address = 2;
    Coin coin = 3;
}

message RemoveStoredKeyAccountOfAddressResp {
    StoredKeyInfo storedKey = 1;
}

//// 13. Export the private key of StoredKey
message ExportKeyStorePrivateKeyParam {
    bytes StoredKeyData = 1;
    string password = 2;
    Coin coin = 3;
}

//// 14. Export the private key of StoredKey at specific derivation path. Fail if the StoredKey is not a Hd StoredKey
message ExportKeyStorePrivateKeyOfPathParam {
    bytes StoredKeyData = 1;
    string password = 2;
    Coin coin = 3;
    string derivationPath = 4;
}

message ExportKeyStorePrivateKeyResp {
    string privateKey = 1;
}

//// 15. Export the mnemonic of the StoredKey. Fail if the StoredKey is not a Hd StoredKey
message ExportKeyStoreMnemonicParam {
    bytes StoredKeyData = 1;
    string password = 2;
}

message ExportKeyStoreMnemonicResp {
    string mnemonic = 1;
}

//// 16. Export the V3 KeyStoreJson string of the StoredKey
message ExportKeyStoreJsonParam {
    bytes StoredKeyData = 1;
    string password = 2;
    string newPassword = 3;
    Coin coin = 4;
}

//// 17. Export the V3 KeyStoreJson string of the StoredKey at specific derivation path. Fail if the StoredKey is not a Hd StoredKey
message ExportKeyStoreJsonOfPathParam {
    bytes StoredKeyData = 1;
    string password = 2;
    string newPassword = 3;
    Coin coin = 4;
    string derivationPath = 5;
}

message ExportKeyStoreJsonResp {
    string json = 1;
}

//// 18. Create a new account to the StoredKey at specific derivation path. Fail if the StoredKey is not a Hd StoredKey
message CreateStoredKeyNewAccountParam {
    bytes StoredKeyData = 1;
    Coin coin = 2;
    string derivationPath = 3;
    string password = 4;
}

message CreateStoredKeyNewAccountResp {
    StoredKeyAccountInfo account = 1;
    StoredKeyInfo storedKey = 2;
}