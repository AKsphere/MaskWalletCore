syntax = "proto3";
package Param;

/* Begin of Structs definition used in Requests/Responses */
enum Coin {
    Ethereum = 0;
    Polkadot = 1;
}

enum StoredKeyType {
    PrivateKey = 0;
    Hd = 1;
}

message StoredKeyInfo {
    string id = 1;
    string name = 2;
    StoredKeyType type = 3;
    bytes data = 4;  // Raw data of the StoredKey, used in requests required an existing StoredKey
}

message StoredKeyAccountInfo {
    string address = 1;
    string derivationPath = 2;
    string coin = 3;  // Coin id
    string extendedPublicKey = 4;
}
/* End of Structs definition used in Requests/Responses */

/* Begin of Requests/Responses definition */
//// 1. Get information from StoredKey raw data
message StoredKeyLoadParam {
    repeated bytes data = 1;
}

message StoredKeyLoadResp {
    repeated StoredKeyInfo StoredKeys = 1;
}

//// 2. Create a new StoredKey with random generated mnemonic
message CreateStoredKeyParam {
    string name = 1;
    string password = 2;
}

message CreateStoredKeyResp {
    StoredKeyInfo StoredKey = 1;
}

//// 3. Create a StoredKey with private key 
message PrivateStoredKeyImportParam {
    string privateKey = 1; // Hex encoded private key string
    string password = 2;
    string name = 3;
    Coin coin = 4;
}

message PrivateStoredKeyImportResp {
    StoredKeyInfo StoredKey = 1;
}

//// 4. Create a new StoredKey with given mnemonic
message MnemonicStoredKeyImportParam {
    string mnemonic = 1;
    string name = 2;
    string password = 3;
    Coin coin = 4;
}

message MnemonicStoredKeyImportResp {
    StoredKeyInfo StoredKey = 1;
}

//// 5. Create a new StoredKey with Json
message JsonStoredKeyImportParam {
    string json = 1;
    string name = 2;
    string password = 3;
    Coin coin = 4;
}

message JsonStoredKeyImportResp {
    StoredKeyInfo StoredKey = 1;
}

//// 5. Get count of accounts of a StoredKey
message GetStoredKeyAccountCountParam {
    bytes data = 1; // StoredKey data returned from other response
}

message GetStoredKeyAccountCountResp {
    uint32 count = 1;
}

//// 6. Get the account at specific index of a StoredKey
message GetStoredKeyAccountParam {
    bytes data = 1;   // StoredKey data returned from other response
    uint32 index = 2; // Index of the account, begin from zero
}

message GetStoredKeyAccountResp {
    StoredKeyAccountInfo account = 1;
}

//// 7. Get all accounts information of a StoredKey
message GetStoredKeyAllAccountParam {
    bytes data = 1;
}

message GetStoredKeyAllAccountResp {
    repeated StoredKeyAccountInfo accounts = 1;
}

//// 8. Get the coin of specific coin form a StoredKey
message GetStoredKeyAccountOfCoinParam {
    bytes storedKeyData = 1;
    Coin coin = 2;
    oneof optionalWallet {
        bytes walletData = 3;
    }
}

message GetStoredKeyAccountOfCoinResp {
    StoredKeyInfo StoredKey = 1;
    oneof optionalAccount {
        StoredKeyAccountInfo account = 2;
    }
}